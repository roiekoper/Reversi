{
  "_args": [
    [
      {
        "raw": "@webassemblyjs/floating-point-hex-parser@1.8.5",
        "scope": "@webassemblyjs",
        "escapedName": "@webassemblyjs%2ffloating-point-hex-parser",
        "name": "@webassemblyjs/floating-point-hex-parser",
        "rawSpec": "1.8.5",
        "spec": "1.8.5",
        "type": "version"
      },
      "/Users/roiekoper/Study/Second-year/Web-Developing-Course/Reversi-Webpack/node_modules/@webassemblyjs/wast-parser"
    ]
  ],
  "_from": "@webassemblyjs/floating-point-hex-parser@1.8.5",
  "_hasShrinkwrap": false,
  "_id": "@webassemblyjs/floating-point-hex-parser@1.8.5",
  "_location": "/@webassemblyjs/floating-point-hex-parser",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/floating-point-hex-parser_1.8.5_1551004958767_0.276850251317041"
  },
  "_npmUser": {
    "name": "xtuc",
    "email": "contact@xtuc.fr"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "@webassemblyjs/floating-point-hex-parser@1.8.5",
    "scope": "@webassemblyjs",
    "escapedName": "@webassemblyjs%2ffloating-point-hex-parser",
    "name": "@webassemblyjs/floating-point-hex-parser",
    "rawSpec": "1.8.5",
    "spec": "1.8.5",
    "type": "version"
  },
  "_requiredBy": [
    "/@webassemblyjs/wast-parser"
  ],
  "_resolved": "https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.8.5.tgz",
  "_shasum": "1ba926a2923613edce496fd5b02e8ce8a5f49721",
  "_shrinkwrap": null,
  "_spec": "@webassemblyjs/floating-point-hex-parser@1.8.5",
  "_where": "/Users/roiekoper/Study/Second-year/Web-Developing-Course/Reversi-Webpack/node_modules/@webassemblyjs/wast-parser",
  "author": {
    "name": "Mauro Bringolf"
  },
  "bugs": {
    "url": "https://github.com/xtuc/webassemblyjs/issues"
  },
  "dependencies": {},
  "description": "A function to parse floating point hexadecimal strings as defined by the WebAssembly specification",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "1ba926a2923613edce496fd5b02e8ce8a5f49721",
    "integrity": "sha512-9p+79WHru1oqBh9ewP9zW95E3XAo+90oth7S5Re3eQnECGq59ly1Ri5tsIipKGpiStHsUYmY3zMLqtk3gTcOtQ==",
    "tarball": "https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.8.5.tgz",
    "fileCount": 5,
    "unpackedSize": 6369,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJccnUfCRA9TVsSAnZWagAAbf0P/A4yvekpAq8hCBdXBHwx\nStsaAO5tx9uqWgXAGmN7hrlcZpSy6yIZ3II7+wRSDC1SrrhLA/DCEpeFv9V/\n/h4jesQUOmFzyX25/mNuE18dfAjZfn2mf33nr9qY/qphm6mcegNb/aLB2xEN\nUv6t4W2VW/7Mhs2K0kDQwiTH9LOneNGE1DKuH849iwdeVrrin2ONRMTsLlg4\nqAH8CRCGvhHSVNsOg7Wf0dZcVgkYET09gbBEJLwC24CDpwCCpO+peqEjzbcd\nr6hZvwvDKshzxBIc+DHqyASJVAChB76+izNJCrACEXYr8YTiOl4HXHtsqobI\nJ92kSKVdKf3eNd1GvZ8CWxo+wCNphbO3iUX0Xsf3pYRDMnL+CHKqOp/9fMjw\nWRnkzYIBvN2LGbAyV9tAYYJi+MI+jKJV4ijU0wfZnXpSc6GWib1kV60+vCJY\nf6wL9E1IJa9UFHjH3Qdezort5W6eJOEshMl9KC8sPq/sSSyWmfooECxqYQm2\nYzpL0r4qV8/AAmjgiHyKhzveW9v0wYV0YAOKBVm5Dg5SU1JcHkofl7HqRqhK\nE0VfsUyjetPXR0LKXrXAXK1Tq8+5Oox2HUNZz7i52jzKvWurNgIHAcd+KHZM\noQzeFJlObItPuhulZucttgpmNKN8Q/sXjZ78wPKPvtNK983mai2T+rXDqYLG\necGO\r\n=5/AD\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "77bc195e9bb463b4fa4cbdb6291eed446d454d49",
  "homepage": "https://github.com/xtuc/webassemblyjs#readme",
  "keywords": [
    "webassembly",
    "floating-point"
  ],
  "license": "MIT",
  "licenseText": "MIT License\n\nCopyright (c) 2017 Mauro Bringolf\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "xtuc",
      "email": "contact@xtuc.fr"
    }
  ],
  "module": "esm/index.js",
  "name": "@webassemblyjs/floating-point-hex-parser",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# Parser function for floating point hexadecimals\n\n[![license](https://img.shields.io/github/license/maurobringolf/@webassemblyjs/floating-point-hex-parser.svg)]()\n[![GitHub last commit](https://img.shields.io/github/last-commit/maurobringolf/@webassemblyjs/floating-point-hex-parser.svg)]()\n[![npm](https://img.shields.io/npm/v/@webassemblyjs/floating-point-hex-parser.svg)]()\n\n> A JavaScript function to parse floating point hexadecimals as defined by the [WebAssembly specification](https://webassembly.github.io/spec/core/text/values.html#text-hexfloat).\n\n## Usage\n\n```javascript\nimport parseHexFloat from '@webassemblyjs/floating-point-hex-parser'\n\nparseHexFloat('0x1p-1')               // 0.5\nparseHexFloat('0x1.921fb54442d18p+2') // 6.283185307179586\n```\n\n## Tests\n\nThis module is tested in two ways. The first one is through a small set of test cases that can be found in [test/regular.test.js](https://github.com/maurobringolf/@webassemblyjs/floating-point-hex-parser/blob/master/test/regular.test.js). The second one is non-deterministic (sometimes called *fuzzing*):\n\n1. Generate a random IEEE754 double precision value `x`.\n1. Compute its representation `y` in floating point hexadecimal format using the C standard library function `printf` since C supports this format.\n1. Give both values to JS testcase and see if `parseHexFloat(y) === x`.\n\nBy default one `npm test` run tests 100 random samples. If you want to do more, you can set the environment variable `FUZZ_AMOUNT` to whatever number of runs you'd like. Because it uses one child process for each sample, it is really slow though. For more details about the randomized tests see [the source](https://github.com/maurobringolf/@webassemblyjs/floating-point-hex-parser/tree/master/test/fuzzing).\n\n## Links\n\n* [maurobringolf.ch/2017/12/hexadecimal-floating-point-notation/](https://maurobringolf.ch/2017/12/hexadecimal-floating-point-notation/)\n\n* [github.com/xtuc/js-webassembly-interpreter/issues/32](https://github.com/xtuc/js-webassembly-interpreter/issues/32)\n\n* [github.com/WebAssembly/design/issues/292](https://github.com/WebAssembly/design/issues/292)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/xtuc/webassemblyjs.git"
  },
  "scripts": {
    "build-fuzzer": "[ -f ./test/fuzzing/parse.out ] || gcc ./test/fuzzing/parse.c -o ./test/fuzzing/parse.out -lm -Wall"
  },
  "version": "1.8.5"
}
